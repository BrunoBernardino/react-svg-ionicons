/*
  Autogenerated at @{date}
*/
import * as React from 'react'

type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>

/**
 * SVG icon component
 */
export interface SVGIcon { (opts: object, ios?: boolean): JSX.Element }

/**
 * Bundles: name to icon translations
 */
export type IconMap = { [K in IconNames]?: SVGIcon }

/**
 * Size aliases
 */
export interface IonIconSizes {
  small: string
  regular: string
  large: string
  larger: string
  largest: string
}

/**
 * IonIcon class properties and attributes.
 */
export interface IonIconProps extends
    Omit<React.SVGAttributes<SVGSVGElement>, 'xmlns' | 'viewBox'>,
    React.ClassAttributes<IonIcon> {
  name: IconNames
  color?: string
  size?: string | number
  iconType?: 'ios' | 'md'
  innerRef?: React.ClassAttributes<SVGSVGElement>['ref']
}

/**
 * Possible defaults
 */
export interface IonIconDefs extends
  Omit<IonIconProps, 'children' | 'name' | 'innerRef'> {
}

/**
 * Renders a SVG ionicon.
 */
export declare class IonIcon extends React.PureComponent<IonIconProps> {
}

/**
 * Adds the given icons, without remove the existents.
 * @param iconMap Object with name-icon translations.
 */
export function addIcons (iconMap: IconMap): void

/**
 * Merge the given values with the current defaults.
 * Pass `null` to remove the defaults.
 * @param defaults Properties to merge.
 */
export function setDefaults (defaults: IonIconDefs | null): void

/**
 * Reset the table of named sizes.
 * @param defaults Properties to merge.
 */
export function setSizes (sizes: Partial<IonIconSizes>): void

/**
 * Icon names
 */
export type IconNames =
@{names}
